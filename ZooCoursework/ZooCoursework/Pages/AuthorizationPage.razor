@page "/authorization"

@using ZooCoursework.DataBase
@using ZooCoursework.Services
@inject ZooCourseworkContext ZooContext
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject CurrentElementService CurrentElement

<PageTitle>АВТОРИЗАЦИЯ</PageTitle>

<style>
    .paper {
        position: absolute;
        left: 180px;
        top: 100px;
        width: 1000px;
        height: 550px;
        box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px;
        background-color: #EEFFF7;
    }
    
    .img {
        width: 400px;
        height: 400px;
    }

    .mainLabel {
        text-align: center;
        margin-right: 90px;
        margin-bottom: 30px;
        font-size: 50px;
        font-weight: 500;
        color: #21A77F;
        text-decoration: underline;
        font-family: Andale Mono, monospace;
    }

    .labelText {
        font-size: 30px;
        font-weight: 500;
        color: #21A77F;
        margin-top: 10px;
        margin-bottom: 5px;
        margin-left: 7px;
    }

    /*.href {
        color: #5FCEAD;
        text-decoration: underline;
    }

        .href:hover {
            color: #21A77F;
        }*/
</style>

<MudPaper Class="paper">
    <div class="mainBlock"> 
        <div class="imgBlock">
            <MudImage Src="/images/Лого.png" Class="img"></MudImage>
        </div>
        <div class="fieldsBlock">
            <MudText Class="mainLabel">АВТОРИЗАЦИЯ</MudText>
            <div>
                <MudText Class="labelText">Логин</MudText>
                <input @bind-value="login" />
            </div>
            <div>
                <MudText Class="labelText">Пароль</MudText>
                <input @bind-value="password" />
            </div>
            <div class="btnBlock">
                <button class="btn" onclick="@Auth">ВОЙТИ</button>
            </div>
        </div>
    </div>
</MudPaper>

@code {
    string login = "";
    string password = "";

    protected override void OnInitialized()
    {
        initSnakebarPosition(Defaults.Classes.Position.TopCenter);
    }

    void initSnakebarPosition(string position)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = position;
    }

    private void Auth()
    {
        if (login == "" || password == "")
        {
            Snackbar.Add("Для входа в стистему введите логин и пароль!", Severity.Error, config => { config.ShowCloseIcon = false; });
            return;
        }

        if (login != "admin" && password != "admin")
        {
            Snackbar.Add("Неверные логин или пароль!", Severity.Error, config => { config.ShowCloseIcon = false; });
            return;
        }

        //Доработанная часть для нескольких ролей
        var accountDb = ZooContext.Accounts.FirstOrDefault(x => x.Login == login && x.Password == password);

        if (accountDb == null)
        {
            Snackbar.Add("Пользователь не существует", Severity.Error, config => { config.ShowCloseIcon = false; });
            return;
        }

        CurrentElement.CurrentAccount = accountDb;
        CurrentElement.CurrentUser = ZooContext.Users.FirstOrDefault(x => x.Id == accountDb.UserId);

        Navigation.NavigateTo("/map");
    }
}
