@page "/account"

@using ZooCoursework.DataBase
@using ZooCoursework.Services
@inject ZooCourseworkContext ZooContext
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject FileSystemService FileSystemService
@inject CurrentElementService CurrentElement

<PageTitle>АККАУНТ</PageTitle>

<style>
    .paper {
        position: absolute;
        left: 180px;
        top: 100px;
        width: 1000px;
        height: 550px;
        box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px;
        background-color: #EEFFF7;
    }

    .labelText {
        font-size: 25px;
        font-weight: 500;
        color: #21A77F;
        margin-top: 10px;
        margin-bottom: 5px;
        margin-left: 7px;
    }

    .fieldsBlock {
        flex: 50%;
        margin-left: 50px;
        height: 500px;
    }

    .imgBlock {
        flex: 50%;
        text-align: center;
        margin-right: 70px;
        width: 400px;
        height: 400px;
    }

    .camera {
        background-color: #21A77F;
        left: 170px;
        bottom: 50px;
    }
</style>

<MudPaper Class="paper">
    <div class="mainBlock"> 
        <div class="fieldsBlock">
            <div>
                <MudText Class="labelText">Фамилия<span style="visibility: @visible"> *</span></MudText>
                <input @bind-value="@surname" readonly="@edit" />
            </div>
            <div>
                <MudText Class="labelText">Имя<span style="visibility: @visible"> *</span></MudText>
                <input @bind-value="@name" readonly="@edit" />
            </div>
            <div>
                <MudText Class="labelText">Отчество</MudText>
                <input @bind-value="@patronymic" readonly="@edit" />
            </div>
            <div>
                <MudText Class="labelText">Логин<span style="visibility: @visible"> *</span></MudText>
                <input @bind-value="@login" readonly="@edit" />
            </div>
            <div>
                <MudText Class="labelText">Пароль<span style="visibility: @visible"> *</span></MudText>
                <input @bind-value="@password" readonly="@edit" />
            </div>
            @if (edit)
            {
                <MudButton Variant="Variant.Outlined" Style="border-radius: 10px; top: 20px; height: 50px; font-size: 16px; border: 3px solid #21A77F; color: #21A77F; margin-right: 20px" OnClick="@GetEdit" >Изменить</MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Outlined" Style="border-radius: 10px; top: 20px; height: 50px; font-size: 16px; border: 3px solid #21A77F; color: #21A77F; margin-right: 20px" OnClick="@Edit" >Сохранить изменения</MudButton>
            }
        </div>
        <div class="imgBlock">
            <MudAvatar Style="height:400px; width:400px; background-color: #EEFFF7; border: 3px solid #21A77F; box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px;" Image="@imagePath"></MudAvatar>
            <MudFileUpload T="IBrowserFile" OnFilesChanged="LoadFiles">
                <ButtonTemplate>
                    <MudIconButton HtmlTag="label"
                                   Icon="@Icons.Material.Filled.PhotoCamera"
                                   for="@context" Class="camera" Disabled="@edit">
                    </MudIconButton>
                </ButtonTemplate>
            </MudFileUpload>
        </div>
    </div>
</MudPaper>

@code {
    private string surname = "";
    private string name = "";
    private string patronymic = "";
    private string login = "";
    private string password = "";
    private string userImage = "";
    private string imagePath = "";

    private string visible = "hidden";

    private bool edit = true;

    protected override void OnInitialized()
    {
        GetFields();
    }

    private void GetEdit() 
    {
        visible = "visible";
        edit = false;
    }

    private void GetFields()
    {
        surname = CurrentElement.CurrentUser.Surname;
        name = CurrentElement.CurrentUser.Name;
        patronymic = CurrentElement.CurrentUser.Patronymic;
        login = CurrentElement.CurrentAccount.Login;
        password = CurrentElement.CurrentAccount.Password;
        userImage = CurrentElement.CurrentUser.Image;
        imagePath = $"/images/Users/{CurrentElement.CurrentUser.Image}";
    }

    private void GetData()
    {
        CurrentElement.CurrentUser.Surname = surname;
        CurrentElement.CurrentUser.Name = name;
        CurrentElement.CurrentUser.Patronymic = patronymic;
        CurrentElement.CurrentAccount.Login = login;
        CurrentElement.CurrentAccount.Password = password;
        CurrentElement.CurrentUser.Image = userImage;
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(e.FileCount))
        {
            Stream stream = file.OpenReadStream(5000000000);
            await FileSystemService.UploadFileAsync(file.Name, stream, "user");
            userImage = file.Name;
            await stream.DisposeAsync();
            imagePath = $"/images/Users/{file.Name}";
        }
    }

    private void Edit()
    {
        if (surname == "" ||
        name == "" ||
        login == "" ||
        password == "")
        {
            Snackbar.Add("Для изменения данных аккаунта все обязательные поля должны быть заполнены!", Severity.Error, config => { config.ShowCloseIcon = false; });
            return;
        }

        GetData();
        ZooContext.Users.Update(CurrentElement.CurrentUser);
        ZooContext.Accounts.Update(CurrentElement.CurrentAccount);
        ZooContext.SaveChanges();
        ZooContext.ChangeTracker.Clear();
        Snackbar.Add("Изменения аккаунта успешно сохранены!", Severity.Success, config => { config.ShowCloseIcon = false; });
        visible = "hidden";
        edit = true;
    }
}
