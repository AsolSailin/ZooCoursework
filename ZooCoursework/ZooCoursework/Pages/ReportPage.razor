@page "/report_page/{currentReportId}"
@using ZooCoursework.DataBase
@inject ZooCourseworkContext ZooContext
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>СТРАНИЦА ОТЧЕТА</PageTitle>

<style>
    .paper {
        position: absolute;
        left: 180px;
        top: 100px;
        width: 1000px;
        height: 550px;
        box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px;
        background-color: #EEFFF7;
    }

    .mainLabel {
        text-align: center;
        margin-right: 90px;
        margin-bottom: 30px;
        font-size: 50px;
        font-weight: 500;
        color: #21A77F;
        text-decoration: underline;
        font-family: Andale Mono, monospace;
    }

    .labelText {
        font-size: 25px;
        font-weight: 500;
        color: #21A77F;
        margin-top: 10px;
        margin-bottom: 5px;
        margin-left: 7px;
    }

    .fieldsBlock {
        flex: 50%;
        margin-bottom: 30px;
        margin-right: 30px;
    }

    .listBlock {
        flex: 50%;
        text-align: center;
        margin-left: 50px;
        width: 400px;
        height: 400px;
    }

    .mainLabel {
        text-align: center;
        margin-left: auto;
        margin-right: auto;
        font-size: 50px;
        font-weight: 500;
        color: #21A77F;
        text-decoration: underline;
        font-family: Andale Mono, monospace;
    }

    .main {
        height: 100%;
        margin-left: auto;
        margin-right: auto;
        overflow-y: scroll;
    }
</style>

<MudPaper Class="paper">
    <div class="main">
        <div >
                <p Class="mainLabel">Отчет №@currentReportId</p>
                @if (!currentReport.IsAccepted)
                {
                    <MudButton Variant="Variant.Outlined" Style="bottom: 30px; border-radius: 10px; height: 30px; font-size: 18px; border: 3px solid #21A77F; color: #21A77F;" Class="d-flex mx-auto" OnClick="GetAccept">Принять отчет</MudButton>
                }
        </div>
        <div class="mainBlock">
            <div class="fieldsBlock">
                <div>
                    <MudText Class="labelText">Должность сотрудника</MudText>
                    <input @bind-value="currentRole.Title" />
                </div>
                <div>
                    <MudText Class="labelText">Фамилия</MudText>
                    <input @bind-value="currentUser.Surname" />
                </div>
                <div>
                    <MudText Class="labelText">Имя</MudText>
                    <input @bind-value="currentUser.Name" />
                </div>
                <div>
                    <MudText Class="labelText">Отчество</MudText>
                    <input @bind-value="currentUser.Patronymic" />
                </div>

            </div>
            <div class="tableBlock" >
                @switch(currentRole.Title)
                {
                    case "Ветеринар":
                        <MudText Class="labelText">Диаграмма лечения</MudText>
                        break;
                    case "Дрессировщик":
                        <MudText Class="labelText">Диаграмма питания</MudText>
                        break;
                    case "Уборщик":
                        <MudText Class="labelText">Диаграмма уборки</MudText>
                        break;
                }
                <MudChart ChartType="ChartType.Donut" LegendPosition="Position.Bottom" Width="270px" Height="270px"
                          InputData="@data" InputLabels="@labels"></MudChart>
            </div>
        </div>
        <div style="margin-left: 50px; margin-right: 50px;">
            <MudText Class="labelText">Отчетная таблица:</MudText>
            <MudTable Items="@aviariesList" Hover="true" Style="border: solid 1px #5FCEAD; border-radius: 5px; ">
                <HeaderContent>
                    <MudTh>Номер вольера</MudTh>
                    <MudTh>Название вольера</MudTh>
                    <MudTh>Вид вольера</MudTh>
                    <MudTh>Вид животных</MudTh>
                    <MudTh>Количество животных</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Title" Style="font-size: 20px;">@context.Id</MudTd>
                    <MudTd DataLabel="Title" Style="font-size: 20px;">@context.Title</MudTd>
                    <MudTd DataLabel="Title" Style="font-size: 20px;">@GetType(context)</MudTd>
                    <MudTd DataLabel="Title" Style="font-size: 20px;">@GetKind(context)</MudTd>
                    <MudTd DataLabel="Title" Style="font-size: 20px;">@GetCount(context)</MudTd>
                </RowTemplate>
            </MudTable>
        </div>
        <MudText style="font-size: 20px; margin-left: 50px; margin-top: 10px;">@currentReport.Description</MudText>
    </div>
</MudPaper>

@code {
    [Parameter]
    public string? currentReportId { get; set; }

    private List<Aviary> aviariesList = new List<Aviary>();
    private List<Animal> animalsList = new List<Animal>();
    private List<AnimalMaterial> animalMaterials = new List<AnimalMaterial>();
    private List<CareMaterial> materials = new List<CareMaterial>();

    public List<int> dataList = new List<int>();
    public List<string> labelsList = new List<string>();

    private Report currentReport = new Report();
    private User currentUser = new User();
    private Aviary currentAviary = new Aviary();
    private Role currentRole = new Role();
    
    public string[] labels = new string[] { };
    public double[] data = new double[] { };

    protected override async Task OnInitializedAsync()
    {
        currentReport = ZooContext.Reports.FirstOrDefault(x => x.Id == int.Parse(currentReportId));
        currentUser = ZooContext.Users.FirstOrDefault(x => x.Id == currentReport.UserId);
        currentAviary = ZooContext.Aviaries.FirstOrDefault(x => x.Id == currentReport.AviaryId);
        currentRole = ZooContext.Roles.FirstOrDefault(x => x.Id == currentUser.RoleId);

        aviariesList = ZooContext.Aviaries.Where(x => x.Id == currentReport.AviaryId).ToList();
        animalsList = ZooContext.Animals.Where(x => x.AviaryId == currentAviary.Id).ToList();

        switch(currentRole.Title)
        {
            case "Ветеринар":
                foreach (Animal item in animalsList)
                {
                    animalMaterials = ZooContext.AnimalMaterials.Where(x => x.Date == currentReport.Date && x.AnimalId == item.Id &&
                        (x.MaterialId == 8 || x.MaterialId == 9 || x.MaterialId == 10)).ToList();
                    dataList.Add(animalMaterials.Count);
                    labelsList.Add(item.Name);
                }
                break;
            case "Дрессировщик":
                foreach (Animal item in animalsList)
                {
                    animalMaterials = ZooContext.AnimalMaterials.Where(x => x.Date == currentReport.Date && x.AnimalId == item.Id &&
                        (x.MaterialId == 1 || x.MaterialId == 2 || x.MaterialId == 3 || x.MaterialId == 4 || 
                            x.MaterialId == 5 || x.MaterialId == 6 || x.MaterialId == 7)).ToList();
                    dataList.Add(animalMaterials.Count);
                    labelsList.Add(item.Name);
                }
                break;
            case "Уборщик":
                foreach (Animal item in animalsList)
                {
                    animalMaterials = ZooContext.AnimalMaterials.Where(x => x.Date == currentReport.Date && x.AnimalId == item.Id &&
                        (x.MaterialId == 11 || x.MaterialId == 12 || x.MaterialId == 13)).ToList();
                    dataList.Add(animalMaterials.Count);
                    labelsList.Add(item.Name);
                }
                break;
        }

        data = dataList.ToArray().Select(Convert.ToDouble).ToArray();
        labels = labelsList.ToArray();
    }

        private string GetType(Aviary context) => ZooContext.TypeAviaries.FirstOrDefault(x => x.Id == context.TypeId).Title;

        private string GetKind(Aviary context) => ZooContext.AnimalKinds.FirstOrDefault(x => x.Id == context.KindId).Title;

        private string GetCount(Aviary context) => ZooContext.Animals.Where(x => x.AviaryId == currentAviary.Id).ToList().Count.ToString();

    private void GetAccept()
    {
        currentReport.IsAccepted = true;
        ZooContext.Reports.Update(currentReport);
        ZooContext.SaveChanges();
        Snackbar.Add("Отчет принят!", Severity.Success, config => { config.ShowCloseIcon = false; });
        Navigation.NavigateTo($"/report_list");
    }
}

