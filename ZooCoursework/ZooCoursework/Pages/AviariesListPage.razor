@page "/aviary_list"
@using ZooCoursework.DataBase
@using ZooCoursework.Services;
@inject ZooCourseworkContext ZooContext
@inject NavigationManager Navigation
@inject FileSystemService FileSystemService
@inject ISnackbar Snackbar

<PageTitle>СПИСОК ВОЛЬЕРОВ</PageTitle>

<style>
    .mainblock {
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
    }

    .mainLabel {
        text-align: center;
        margin-right: 90px;
        margin-bottom: 30px;
        font-size: 50px;
        font-weight: 500;
        color: #21A77F;
        text-decoration: underline;
        font-family: Andale Mono, monospace;
    }

    .titleText {
        font-size: 25px;
        font-weight: 500;
        color: #21A77F;
        margin-left: 7px;
        text-align: center;
        vertical-align: middle;
    }

    .labelText {
        font-size: 23px;
        font-weight: 500;
        color: #21A77F;
        margin-top: 10px;
        margin-left: 7px;
    }

    .avatar {
        background-color: #B2F0D2;
    }

    .camera {
        background-color: #21A77F;
        left: 130px;
        bottom: 50px;
    }

    .fieldsBlock {
        flex: 50%;
        margin-left: 50px;
        height: 400px;
        width: 300px;
        overflow-y: scroll;
    }
</style>

<div style="position: absolute; left: 190px; width: 1000px;display: flex; flex-direction: row; justify-content: flex-start;">
    <MudSelect T="string" Label="Вид животных" Variant="Variant.Outlined" ValueChanged="GetKind" Value="currentKind" Style="font-size: 16px; border: 3px solid #21A77F; color: #21A77F; border-radius: 10px; ">
        @foreach (var kind in kinds)
        {
            <MudSelectItem Value="@(kind.Title)" />
        }
    </MudSelect>
    <MudButton Variant="Variant.Outlined" Style="border-radius: 10px; top: 6px; height: 63px; font-size: 16px; border: 3px solid #21A77F; color: #21A77F; left:7px;" OnClick="OpenAddDialog">Добавить животное</MudButton>
</div>

<div style="position:absolute">
    <MudGrid Spacing="@spacing" Justify="Justify.FlexStart"
             Style="position: absolute;
        left: 80px;
        margin-right: auto;
        top: 100px;
        width: 1200px;
        box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px;
        border-radius: 30px;
        background-color: #EEFFF7;
    }">
        @foreach (var aviary in aviaries)
        {
            <MudItem>
                <MudPaper Height="270px" Width="260px" Class="d-flex align-center justify-center mud-width-full py-8" Style="background-color: #A68EFE; box-shadow: none; border-radius: 20px;">
                    <a @onclick="() => GetAviary(aviary)">
                        <MudPaper Height="270px" Width="260px" Style="border: 3px solid #21A77F; box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px; border-radius: 20px;">
                            <img src="@GetImage(aviary)" style="height:200px; width:100%; background-color: #EEFFF7; border-radius: 17px 17px 0 0;" />
                            <MudText Class="titleText">@aviary.Title</MudText>
                        </MudPaper>
                    </a>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
</div>

<MudDialog @bind-IsVisible="visible" Options="options" Style="height: 600px;">
    <TitleContent>
        <MudText Style="font-size: 30px">
            Добавление животного
        </MudText>
    </TitleContent>
    <DialogContent>
        <div class="mainblock">
            <div class="imgBlock">
                @if (!string.IsNullOrEmpty(animalImage))
                {
                    <MudAvatar Style="height:300px; width:300px; font-size:2rem; background-color: white" Image="@imagePath"></MudAvatar>
                }
                else
                {
                    <MudAvatar Style="height:300px; width:300px; font-size:2rem;" Class="avatar"></MudAvatar>
                }

                <MudFileUpload T="IBrowserFile" OnFilesChanged="LoadFiles">
                    <ButtonTemplate>
                        <MudIconButton HtmlTag="label"
                                       Icon="@Icons.Material.Filled.PhotoCamera"
                                       for="@context" Class="camera">
                        </MudIconButton>
                    </ButtonTemplate>
                </MudFileUpload>
            </div>

            <div class="fieldsBlock">
                <div>
                    <MudText Class="labelText">Вольер<span> *</span></MudText>
                    <MudSelect T="string" Variant="Variant.Outlined" ValueChanged="GetKind" Value="animalAviary" Style="font-size: 15px; border: 3px solid #5FCEAD; color: #5FCEAD; border-radius: 10px; ">
                        @foreach (var aviary in aviaries)
                        {
                            <MudSelectItem Value="@(aviary.Title)" />
                        }
                    </MudSelect>
                </div>
                <div>
                    <MudText Class="labelText">Пол<span style="visibility: @visible"> *</span></MudText>
                    <MudSelect T="string" Variant="Variant.Outlined" @bind-Value="gender" Style="font-size: 15px; border: 3px solid #5FCEAD; color: #5FCEAD; border-radius: 10px; ">
                        @foreach (var g in genders)
                        {
                            <MudSelectItem Value="@(g.Title)" />
                        }
                    </MudSelect>
                </div>
                <div>
                    <MudText Class="labelText">Вид</MudText>
                    <input @bind-value="animalKind" readonly="true" />
                </div>
                <div>
                    <MudText Class="labelText">Имя<span style="visibility: @visible"> *</span></MudText>
                    <input @bind-value="animalName" />
                </div>
                <div>
                    <MudText Class="labelText">Дата рождения</MudText>
                    <MudDatePicker @bind-Date="animalBirthDate" DisableToolbar="true" Style="width: 380px; margin-left: 10px;" />
                </div>
            </div>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" Style="border-radius: 10px; top: 6px; height: 50px; font-size: 15px; border: 3px solid #21A77F; color: #21A77F; margin-right: 7px;" OnClick="Add">Добавить</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private int spacing { get; set; } = 5;

    private List<Aviary> aviaries = new List<Aviary>();
    private List<AnimalKind> kinds = new List<AnimalKind>();
    private List<AnimalGender> genders = new List<AnimalGender>();
    private static readonly AnimalKind _allKinds = new AnimalKind() { Title = "Все" };

    private string currentKind = "Все";
    private string animalImage = "";
    private string imagePath = "";
    private string animalName = "";
    private string animalAviary = "";
    private string animalKind = "";
    private string gender = "";

    private DialogOptions options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
    private DateTime? animalBirthDate = DateTime.Today;
    private bool visible;

    protected override void OnInitialized()
    {
        kinds = ZooContext.AnimalKinds.ToList();
        kinds.Add(_allKinds);
        aviaries = ZooContext.Aviaries.ToList();
        genders = ZooContext.AnimalGenders.ToList();
    }

    private string GetImage(Aviary aviary) => $"/images/Animals/{aviary.Image}";

    private void GetAviary(Aviary aviary) => Navigation.NavigateTo($"/aviary_page/{aviary.Id}");

    private void OpenAddDialog()
    {
        GetNull();
        visible = true;
    }

    private void GetKind(string selected)
    {
        animalAviary = selected;
        var aviary = ZooContext.Aviaries.FirstOrDefault(x => x.Title == animalAviary);
        var kindId = aviary.KindId;
        animalKind = ZooContext.AnimalKinds.FirstOrDefault(x => x.Id == kindId).Title;
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(e.FileCount))
        {
            Stream stream = file.OpenReadStream(5000000000);
            await FileSystemService.UploadFileAsync(file.Name, stream, "animal");
            animalImage = file.Name;
            await stream.DisposeAsync();
            imagePath = $"/images/Animals/{file.Name}";
        }
    }

    private void Add()
    {
        if (animalName == "" ||
        animalAviary == "" ||
        gender == "")
        {
            Snackbar.Add("Для добавления животного все обязательные поля должны быть заполнены!", Severity.Error, config => { config.ShowCloseIcon = false; });
            return;
        }

        if (animalBirthDate > DateTime.Today)
        {
            Snackbar.Add("Дата заполнена некорректно!", Severity.Error, config => { config.ShowCloseIcon = false; });
            return;
        }

        var crntGender = ZooContext.AnimalGenders.FirstOrDefault(x => x.Title == gender).Id;

        var newAnimal = new Animal()
            {
                Name = animalName,
                BirthDate = (DateTime)animalBirthDate,
                Image = animalImage,
                AviaryId = ZooContext.Aviaries.FirstOrDefault(x => x.Title == animalAviary).Id,
                GenderId = crntGender,
                IsDeleted = false
            };

        ZooContext.Animals.Add(newAnimal);
        ZooContext.SaveChanges();
        ZooContext.ChangeTracker.Clear();

        Snackbar.Add("Животное успешно добавлено в зоопарк!", Severity.Success, config => { config.ShowCloseIcon = false; });
        visible = false;
        GetNull();
    }

    private void GetNull()
    {
        animalImage = "";
        imagePath = "";
        animalName = "";
        animalAviary = "";
        animalKind = "";
        animalBirthDate = DateTime.Today;
        gender = "";
    }
}

